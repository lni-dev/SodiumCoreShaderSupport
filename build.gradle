plugins {
	id 'fabric-loom' version '1.+'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id 'com.matthewprenger.cursegradle' version '1.+'
}

def sodium_versions = sodium_version.split("-")
def isSodiumBeta = sodium_versions.length > 2 && sodium_versions[2].contains("beta")

def upload_ready_mod_version = project.mod_version + "-sodium" + sodium_versions[1]
if(isSodiumBeta) upload_ready_mod_version += sodium_versions[2]

def supp_mc_versions = new ArrayList<String>();
supp_mc_versions.add(minecraft_version)

def scss_release_type = isSodiumBeta ? "beta" : "release"

if(!additional_supported_mc_versions.isEmpty()) {
	def versions = additional_supported_mc_versions.split(",");
	for (final def v in versions) {
		supp_mc_versions.add(v)
	}
}

version = upload_ready_mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//Mod dependencies
	modImplementation "maven.modrinth:sodium:${project.sodium_version}"
}

if(project.hasProperty("modrinthToken")) {
	modrinth {
		token = modrinthToken // Please use an environment variable for this! The default is `$MODRINTH_TOKEN`.
		projectId = 'G8yJPRdl' // The ID of your Modrinth project. Slugs will not work.
		versionNumber = upload_ready_mod_version // The (preferably SemVer) version of the mod. If not specified, it'll use the `version` declaration
		versionName = 'SodiumCoreShaderSupport' // The version title. If not specified, it'll use the version number
		uploadFile = remapJar // Tells Minotaur to use the remapped jar
		gameVersions = supp_mc_versions // An array of game versions the version supports
		loaders = ['fabric'] // Self-explanatory.
		versionType = scss_release_type
	}
}

if(project.hasProperty("curseForgeToken")) {
	curseforge {
		apiKey = curseForgeToken
		project {
			id = '956376'
			releaseType = scss_release_type
			changelog = 'see github'
			for (final def v in supp_mc_versions)
				addGameVersion v

			mainArtifact(remapJar) {
				displayName = "Sodium Core Shader Support $minecraft_version $upload_ready_mod_version"
			}
		}
	}
}

processResources {
	// rotate sodium version to match the version specified in the mod
	// which differs from the one on maven central
	def svp = sodium_versions[1] + "+" + sodium_versions[0]

	if(isSodiumBeta)
		svp = sodium_versions[1] + "-" + sodium_versions[2] + "+" + sodium_versions[0]

	String mcVerArray = "[ \"" + supp_mc_versions[0] + "\"";
	for(int i = 1; i < supp_mc_versions.size(); i++)
		mcVerArray += ", \"" + supp_mc_versions.get(i) + "\""

	mcVerArray += "]"

	inputs.property "version", project.version
	inputs.property "sodium_version", svp
	inputs.property "loader_version", loader_version
	inputs.property "minecraft_version", mcVerArray

	filesMatching("fabric.mod.json") {
		expand  "version": project.version,
				"sodium_version": svp,
				"loader_version": loader_version,
				"minecraft_version": mcVerArray
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}